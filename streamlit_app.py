import operator
import random
import time

import intvalpy
import matplotlib.pyplot as plt
import plotly.express as px
import matspy
import numpy as np
import pandas as pd
import scipy as sp
import streamlit as st
from intvalpy import Interval
from humanize.time import precisedelta

import stixlib as sx
from maths import CombinationGenerator
from projectsharablestate import ProjectSettings, AppEntry, DefenderCriteria, AttackerCriteria, GameAlgorithm


@st.cache_data(persist=True)
def cached_get_src():
    thesrc = sx.get_data_from_branch("enterprise-attack")
    # st.success("Fetched latest MITRE ATT&CK data")
    return thesrc


# @st.cache_data(presist=True)
def cached_get_technique_to_mitig_relations(thesrc):
    technique_to_mitig_relations = sx.technique_mitigated_by_mitigations(thesrc)
    return technique_to_mitig_relations


def find_price_for_mitigation(mitigation_id):
    price_val = 0
    loss_val = Interval(0, 0)
    for da in project_settings().defender_apps:
        if mitigation_id in da.app_mitigations:
            price_val += da.app_price
            loss_val += da.app_loss
    return price_val + loss_val.mid.real


def classic_monte_carlo(mitig_max, att_max, simulations_amount, comb_res_m, comb_res_a, matrix):
    time_taken = time.time()

    progress_text = "–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–±–æ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    progress_bar = st.progress(0.0, text=progress_text)

    # –ü—Ä–æ–≤–æ–¥–∏–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ N —Å–∏–º—É–ª—è—Ü–∏–π
    for j in range(mitig_max):
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–ª–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—â–∏—Ç—ã
        mitig_comb = comb_res_m.unrankVaryingLengthCombination(j)

        # –ü—Ä–æ–≤–æ–¥–∏–º N —Å–∏–º—É–ª—è—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for n in range(simulations_amount):
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Ç–∞–∫–∏
            i = random.randrange(0, att_max)
            attack_comb = comb_res_a.unrankVaryingLengthCombination(i)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥–∞—è –º–µ—Ä–∞ –∑–∞—â–∏—Ç—ã –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—â–∏—Ç—ã –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∞—Ç–∞–∫–∏
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞—â–∏—â–∏–∞–µ—Ç current_val > 0
            for m in mitig_comb:
                for a in attack_comb:
                    is_mitigated = sx.does_mitigation_mitigates_technique(
                        relations=m_to_t_relation,
                        technique_id=a.get("id"),
                        mitigation_id=m.get("id"))
                    if is_mitigated:
                        matrix[n, j] += find_price_for_mitigation(m.get("id"))

        progress_bar.progress(j / M_for_defender, text=progress_text)

    time_taken -= time.time()
    st.success(f'–ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –∑–∞–Ω—è–ª: {precisedelta(time_taken, minimum_unit="microseconds")}')
    st.balloons()
    progress_bar.empty()


def interactive():
    st.session_state["interactive"] = not st.session_state["interactive"]


def save_sim_settings():
    st.session_state["defender_criteria"] = st.session_state.form_admin_criteria
    st.session_state["attacker_criteria"] = st.session_state.form_attacker_criteria
    st.session_state["sim_amount"] = st.session_state.form_sim_amount
    st.session_state["algorithm"] = st.session_state.form_algorithm
    st.session_state["ready_to_sim"] = True


def save_attacker_settings():
    project_settings().attacker_tactics = [t.get("id") for t in st.session_state.form_available_tactics]
    project_settings().attacker_max_interval = st.session_state.form_app_max_interval


def add_app_entry():
    if not hasattr(project_settings(), 'defender_apps'):
        st.session_state["project_settings"].defender_apps = []
    st.session_state["project_settings"].defender_apps.append(AppEntry(app_name=st.session_state.form_app_name,
                                                                       app_price=st.session_state.form_app_price,
                                                                       app_loss=Interval(
                                                                           st.session_state.form_app_loss[0],
                                                                           st.session_state.form_app_loss[1]),
                                                                       app_mitigations=[m.get("id") for m in
                                                                                        st.session_state.form_app_mitig]
                                                                       ))


def project_settings() -> ProjectSettings:
    return st.session_state['project_settings']


st.set_page_config(page_title="Game Theory Security", page_icon='üßÆ', layout="wide")

src = cached_get_src()

if "intro" not in st.session_state:
    st.session_state["intro"] = False
    st.session_state["ready_to_sim"] = False
    st.session_state["interactive"] = False

if "newproject" not in st.session_state:
    st.session_state["newproject"] = True
    new_project = ProjectSettings
    new_project.mitre_domain = "enterprise-attack"
    new_project.mitre_version = "14.1"
    st.session_state["project_settings"] = ProjectSettings

col1, col2 = st.columns([2, 1])

col1.write('''# –ê–Ω–∞–ª–∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–æ—Ä–∏–∏ –∏–≥—Ä 
–¢–µ–æ—Ä–∏—è –∏–≥—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤–æ –º–Ω–æ–≥–∏—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏ –≤–∫–ª—é—á–∞—è —ç–∫–æ–Ω–æ–º–∏–∫—É, –±–∏–ª–æ–≥–∏—é –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—É–∫–∞—Ö. –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è 
–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã –º–µ–∂–¥—É N –∞–≥–µ–Ω—Ç–∞–º–∏, –±–æ—Ä—è—â–∏–º—Å—è –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–µ—Å—É—Ä—Å–æ–≤. –í –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏–≥—Ä–∞—Ö 
—Ü–µ–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—ã–º–∏, –ø–æ–º–∏–º–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æÃÅ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ —Ä–µ—Å—É—Ä—Å–æ–≤.

–î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–æ—Ä–∏—é –∏–≥—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã, —Å–∏–º—É–ª–∏—Ä—É—è –∏–≥—Ä—É –º–µ–∂–¥—É 
–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º "–∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–º" –∏ "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" (—Ç.–µ. –≤–∞–º–∏). –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 
–∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã (–≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π).

–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ç–∞–∫, –º–µ—Ä –∑–∞—â–∏—Ç –∏ —Ç–∞–∫—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é [**MITRE ATT&CK**](https://attack.mitre.org/), 
–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–µ–∂–∞—è —Å–∏–º—É–ª—è—Ü–∏—é –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –º–∏—Ä—É.

–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å –Ω–∏–∂–µ.
''')

col2.image('prisonerdillema.png', caption="–ó–Ω–∞–º–µ–Ω–∏—Ç–∞—è –¥–∏–ª–ª–µ–º–∞ –∑–∞–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—á–Ω–æ–π –∏–≥—Ä–æ–π")

if st.button("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", key='start_') and not st.session_state['intro']:
    st.session_state['intro'] = True
    st.session_state['newproject'] = True

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞", accept_multiple_files=False)
if uploaded_file is not None:
    st.session_state['intro'] = True
    st.session_state['newproject'] = False
    bytes_data = uploaded_file.getvalue()

if st.session_state['intro']:
    tactics = sx.get_tactics(src)

    st.write("---")
    st.write("## –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏–≥—Ä—ã")
    col3, col4 = st.columns(2)
    with col3:
        st.write('''
        –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞, –µ–≥–æ —Ü–µ–ª—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–µ 
        "—Ç–∞–∫—Ç–∏–∫–∞–º–∏" –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ MITRE ATT&CK.
        
        –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ç–∞–∫—Ç–∏–∫–∏ –±—É–¥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –Ω–∞–±–æ—Ä –∞—Ç–∞–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –º–∞—Ç—Ä–∏—Ü–µ –∏–≥—Ä—ã, –Ω–æ –Ω–µ –Ω–∞ –Ω–∞–±–æ—Ä –º–µ—Ä –∑–∞—â–∏—Ç—ã 
        (—Ç–∞–∫ –∫–∞–∫ —Å–∏–º—É–ª–∏—Ä—É–µ–º–∞—è –∏–≥—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π).
        –í —Ñ–æ—Ä–º–µ —Å–ø—Ä–∞–≤–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞.
        
        –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–ª–æ–≤–∏–π.
        ''')

    with col4:
        with st.form("attacker-settings"):
            available_tactis = st.multiselect(
                label="–¢–∞–∫—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫—É",
                options=tactics,
                format_func=lambda x: x.get("name"),
                help="–°–ø–∏—Å–æ–∫ —Ç–∞–∫—Ç–∏–∫ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ [–∑–¥–µ—Å—å](https://attack.mitre.org/tactics/enterprise/)",
                key='form_available_tactics'
            )
            app_max_interval = st.number_input(
                value=1000,
                key="form_app_max_interval",
                label='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —É—â–µ—Ä–±',
                help='–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∏–∂–µ (–≤ —É.–µ.)'
            )
            bimatrix = st.toggle(
                label="–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞",
                help="–í–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä—É –±–∏–º–∞—Ç—Ä–∏—á–Ω–æ–π",
                disabled=True
            )
            submit = st.form_submit_button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', on_click=save_attacker_settings)

    if hasattr(project_settings(), 'attacker_tactics') and project_settings().attacker_tactics:
        with st.expander(label="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏"):
            st.write("#### –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ç–∞–∫—Ç–∏–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ DataFrame:")
            form_tactics_df = pd.DataFrame(project_settings().attacker_tactics)
            st.dataframe(form_tactics_df)

        mitigations = sx.remove_revoked_deprecated(sx.get_mitigations(src))

        st.write('---')
        st.write("## –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã—Ö –º–µ—Ä –∑–∞—â–∏—Ç—ã –∏ —Ü–µ–Ω—ã")
        col5, col6 = st.columns([0.4, 0.6])
        with col5:
            '''
            –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –∏–≥—Ä—ã –≤ —Ç–µ–æ—Ä–∏–∏ –∏–≥—Ä –æ–ø–µ—Ä–∏—Ä—É—é—Ç "–ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –º–∞—Ç—Ä–∏—Ü–∞–º–∏". –î–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 
            –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –∫–∞–∫–∏–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–∞–∂–¥—ã–π —Ä–µ—Å—É—Ä—Å, –∏ "—Ü–µ–Ω—É" —Ä–µ—Å—É—Ä—Å–∞.

            –ò–≥—Ä–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–∞—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —è–≤–ª—è–µ—Ç—Å—è *–±–∏–º–∞—Ç—Ä–∏—á–Ω–æ–π* –æ–∑–Ω–∞—á–∞—è, —á—Ç–æ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä 
            –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –Ω–µ –∏–º–µ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—Ä–∏—Ü–µ –¥—Ä—É–≥–æ–≥–æ.

            –î–ª—è –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ —ç—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É—â–µ—Ä–±–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å, –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —ç—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ 
            –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ä.

            –†–µ—Å—É—Ä—Å–∞–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å:
            - –ù–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            - –°—Ç–æ—Ä–æ–Ω–µ–µ –ü–û (–∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã, –±—Ä–µ–Ω–¥–º–∞—É–µ—Ä—ã –∏ –ø—Ä–æ—á.)
            - –ú–∞—à–∏–Ω—ã (—Å–µ—Ä–≤–µ—Ä–∞, —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞, —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ –¥—Ä.)

            –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏:
            - –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–Ω—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 
            (–Ω–∞–ø—Ä–∏–º–µ—Ä —É–º–Ω–æ–∂–∏—Ç—å –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —á–∞—Å—ã –Ω–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Ç–∞—Ä–∏—Ñ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
            - –°—Ç–æ—Ä–æ–Ω–Ω–µe –ü–û –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
            - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –º–∞—à–∏–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ü–µ–Ω–æ–π –æ –∏—Ö –∑–∞–∫—É–ø–∫–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é.
            '''

        with col6:
            with st.form("admin-app-specs"):
                app_name = st.text_input(
                    label='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                    key='form_app_name'
                )
                app_price = st.number_input(
                    label='–¶–µ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                    key='form_app_price',
                    help='–≤ —É.–µ.'
                )
                app_loss = st.slider(
                    label='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—â–µ—Ä–±–∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ',
                    min_value=0,
                    max_value=st.session_state.form_app_max_interval,
                    step=1,
                    value=(0, 100),
                    key='form_app_loss'
                )
                app_mitigations = st.multiselect(
                    label="–ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
                    options=mitigations,
                    format_func=lambda x: x.get("name"),
                    help="–°–ø–∏—Å–æ–∫ –º–µ—Ä –∑–∞—â–∏—Ç—ã –µ—Å—Ç—å [–∑–¥–µ—Å—å](https://attack.mitre.org/mitigations/enterprise/)",
                    key='form_app_mitig'
                )
                submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å", on_click=add_app_entry)

        if hasattr(project_settings(), 'defender_apps') and project_settings().defender_apps:
            st.write("#### –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
            defender_apps_df = pd.DataFrame([da.as_dict() for da in project_settings().defender_apps])
            st.dataframe(defender_apps_df)

        st.write('---')
        st.write("## –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ó–∞–¥–∞—á–∏")
        col7, col8 = st.columns([0.5, 0.5])
        if "defender_criteria" not in st.session_state:
            st.session_state["defender_criteria"] = ''

        with col7:
            st.write("–í –¥–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞")
            st.write("### –ö—Ä–∏—Ç–µ—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            if st.session_state["defender_criteria"] != '':
                st.write("#### " + st.session_state["defender_criteria"].value[0])
                st.write(st.session_state["defender_criteria"].value[1])

        with col8:
            with st.form("sim-settings"):
                sim_amount = st.number_input(
                    label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π",
                    help="–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–∏—Å–ª–æ —Å–∏–º—É–ª—è—Ü–∏–π –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ",
                    step=1,
                    value=10,
                    key="form_sim_amount"
                )
                admin_criteria = st.selectbox(
                    label="–ö—Ä–∏—Ç–µ—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    options=[c for c in DefenderCriteria],
                    index=2,
                    key="form_admin_criteria",
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π",
                    format_func=lambda c: c.value[0],
                    disabled=True,
                )
                attacker_criteria = st.selectbox(
                    label="–ö—Ä–∏—Ç–µ—Ä–∏–π –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞",
                    options=[c for c in AttackerCriteria],
                    index=None,
                    key="form_attacker_criteria",
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π",
                    format_func=lambda c: c.value[0],
                    disabled=True
                )
                algorithm = st.selectbox(
                    label="–ê–ª–æ–≥—Ä–∏—Ç–º –∏–≥—Ä—ã",
                    help="–£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –Ω–µ –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–∞—Ü–µ–ª–µ–Ω—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–ª–∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è –ù—ç—à–∞",
                    options=[c for c in GameAlgorithm],
                    index=0,
                    key="form_algorithm",
                    placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º",
                    format_func=lambda c: c.value[0],
                    disabled=True
                )
                submit = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_sim_settings)

        if st.session_state["ready_to_sim"]:
            st.write("# –°–∏–º—É–ª—è—Ü–∏—è")

            # 1. –°–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–∫—Ç–∏–∫–∏.
            # –≠—Ç–æ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–∫—Ç–∏–∫–∏ (–ø–æ —Å—É—Ç–∏ —Å–æ—á–µ—Ç–∞–Ω–∏–µ)

            tactics = sx.get_tactics_by_ids(src, tactics_ids=project_settings().attacker_tactics)

            attacker_strategies = list()
            for tactic in tactics:
                attacker_strategies += sx.get_techniques_by_tactics(src, tactics=[tactic.get("x_mitre_shortname")])
            # Sort lexicographically
            attacker_strategies.sort(key=operator.attrgetter("id"), reverse=True)

            defender_strategies = list()
            for app in project_settings().defender_apps:
                defender_strategies += sx.get_mitigations_by_ids(src, migitation_ids=app.app_mitigations)
            # Sort lexicographically
            defender_strategies.sort(key=operator.attrgetter("id"), reverse=True)

            # –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∏—Å–µ–ª,
            # –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –æ—Ç –µ—ë –ª–µ–∫—Å–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
            # –≤ –Ω–∞–±–æ—Ä–µ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –±–µ–∑ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            combination_resolver_attacks = CombinationGenerator(attacker_strategies)
            combination_resolver_mitigations = CombinationGenerator(defender_strategies)

            M_for_defender = 2 ** len(defender_strategies) - 1
            M_for_attacker = 2 ** len(attacker_strategies) - 1

            st.write(f'''
                ### –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:

                –§–æ—Ä–º—É–ª–∞:

                $$M = 2^S - 1$$, S - —á–∏—Å–ª–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π 

                –î–ª—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ: $$M_A = 2^{{ {len(attacker_strategies)} }} - 1 = $$ {M_for_attacker}

                –î–ª—è –∑–∞—â–∏—â–∞—é—â–µ–≥–æ: $$M_A = 2^{{{len(defender_strategies)}}} - 1 = $$ {M_for_defender}
                ''')
            # –°—á–∏—Ç–∞–µ–º
            if st.session_state["algorithm"] == GameAlgorithm.MonteCarlo:


                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π
                N = st.session_state.sim_amount

                # STIRX –º–∞–ø–ø–∏–Ω–≥ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –≤ —Ç–µ—Ö–Ω–∏–∫–∏
                m_to_t_relation = sx.mitigation_mitigates_techniques(src)

                # –†–∞–∑—Ä—è–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∑–Ω–∞—á–µ–Ω–∏–π
                matrix_defender = np.ndarray((N, M_for_defender))
                #matrix_defender = sp.sparse.lil_matrix((N, M_for_defender), dtype=np.longlong)

                classic_monte_carlo(M_for_defender, M_for_attacker, N, combination_resolver_mitigations,
                                    combination_resolver_attacks, matrix_defender)

                #matrix_defender = matrix_defender.tocsr()



                st.write("### –î–∏–∞–≥—Ä–∞–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π")
                col10, col11 = st.columns(2)

                with col10:
                    """
                    –ù–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–º—É–ª—è—Ü–∏–π

                    –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ —á–∏—Å–ª–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –≤ –º–∞—Ç—Ä–∏—Ü–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                    —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º—É–ª—è—Ü–∏–π –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ. 
                    –¢–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ,
                    –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                    """

                with col11:
                    # matrix_defender_heatmap = px.imshow(matrix_defender)
                    # st.plotly_chart(matrix_defender_heatmap)
                    fig = plt.figure()
                    plt.imshow(matrix_defender, cmap='hot', interpolation='bilinear')
                    st.pyplot(fig)
                    # fig, ax = matspy.spy_to_mpl(matrix_defender)
                    # st.pyplot(fig)
                """
                ---
                ### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
                """

                # –ù–∞–π–¥–µ–º —Å—É–º–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–±–ª—Ü–∞
                sum_of_columns = matrix_defender.sum(axis=0)
                # –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                sum_of_columns = np.ma.masked_equal(sum_of_columns, np.NaN)
                # –°—á–∏—Ç–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: –ø–æ –õ–∞–ø–ª–∞—Å—É —ç—Ç–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                j_criteria = sum_of_columns * (1 / N)
                # –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–µ—Ä–∏—è –¥–ª—è –≤—Å–µ–π –º–∞—Ç—Ä–∏—Ü—ã
                found_criteria_val = np.min(j_criteria)
                st.write(found_criteria_val)
                # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—â–∏—Ç—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è
                j_index = np.argmin(sum_of_columns)

                comb_for_criteria = combination_resolver_mitigations.unrankVaryingLengthCombination(j_index)

                col12, col13 = st.columns(2)

                with col12:
                    f'''
                    ### –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    –°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—â–∏—Ç—ã:

                    $$W_j(A) =$$ {found_criteria_val}

                    $$j = $$ {j_index}

                    –î–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –º–µ—Ä –∑–∞—â–∏—Ç—ã:
                    '''
                    strategy_data_display = []
                    for m in comb_for_criteria:
                        name = m.get("name")
                        url = ""
                        mitre_id = ''
                        for ref in m.get("external_references"):
                            if ref.get("source_name") == "mitre-attack":
                                url = ref.get("url")
                                mitre_id = ref.get("external_id")
                                break
                        strategy_data_display.append((mitre_id, name, url))

                    resulting_strategy_df = pd.DataFrame(strategy_data_display, columns=["mitre_id", "name", "url"])
                    st.dataframe(resulting_strategy_df,
                                 column_config={
                                     "url": st.column_config.LinkColumn("URL")
                                 })

                with col13:
                    '#### –ì—Ä–∞—Ñ–∏–∫ —Å–≤–µ–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ'
                    # –í—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                    found_criteria_vals = matrix_defender[:, j_index]
                    # –°–≤–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ 1d –º–∞—Å—Å–∏–≤
                    found_criteria_vals = found_criteria_vals.flatten()
                    # –°—á–∏—Ç–∞–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—É—é —Å—É–º–º—É (–∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π —Å—É–º–º—ã —ç—Ç–æ —Å—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–ª–µ–º–Ω–µ—Ç–æ–≤)
                    cumulative_sum = np.cumsum(found_criteria_vals)
                    # –°—á–∏—Ç–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π —Å—É–º–º—ã
                    for j in range(len(cumulative_sum)):
                        cumulative_sum[j] = cumulative_sum[j] * (1 / (j + 1))
                    fig_laplace = px.line(y=cumulative_sum, x=range(len(cumulative_sum)))
                    fig_laplace.update_traces(connectgaps=True)
                    fig_laplace.update_layout(yaxis={"title": "–ó–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è", "range": [0, None]},
                                              xaxis={"title":
                                                         "–ò—Ç–µ—Ä–∞—Ü–∏—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ"})
                    st.plotly_chart(fig_laplace)
